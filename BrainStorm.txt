As of now i have made the ui design in figma. According to the design, below is how my ui looks now,

Header bar at top

- Header at has search bar where we can search for any file etc

Sidebar at left side

- Sidebar has two section
  - top section
    - top section has logged in username and email shown
  - bottom section
    - bottom section has menu items,
      - Home
      - Shared files
      - Starred

Main Content Section at right of sidebar

- Has a header section at top which show menu name which is selected, for example show 'Home' when 'Home' is selected from sidebar. This header section also has two buttons, upload and create folder
- Below header has some section in row one below other

  - Recent Uploads Section -> shows card which has file type icon, name & extension(.pdf, .docx,.xlms,.jpeg etc), action icon(delete,rename,share, download, star)
  - Folder Section -> shows all the folders -> created and uploaded
  - Files section -> displays a table with filename, size, action


FOLDER STRUCTURE -------------------------------------------------------------------------------------------------------------------------------



src  
│  
└── components  
    │  
    ├── Layout                    // Main Layout Components  
    │   ├── Navbar                // Header renamed to Navbar for clarity  
    │   │   └── Navbar.  
    │   │   └── SearchBar.  
    │   │  
    │   ├── Sidebar               // Sidebar Components  
    │   │   └── Sidebar.  
    │   │   └── AppLogo.  
    │   │   └── UserInfo.  
    │   │   └── MenuItem.  
    │   │  
    │   └── MainView              // Main Content Section  
    │       ├── MainHeader        // Header for MainView Pages  
    │       │   └── MainHeader.  
    │       │   └── UploadButton.  
    │       │   └── CreateFolderButton.  
    │       │  
    │       └── Pages             // All Pages for MainView  
    │           ├── DashboardPage  
    │           │   └── DashboardPage.  
    │           │   └── RecentUploads.  
    │           │   └── Folders.  
    │           │   └── ActivitiesTable.  
    │           │   └── FileCard.  
    │           │  
    │           ├── SharedFilesPage  
    │           │   └── SharedFilesPage.  
    │           │   └── SharedFileCard.  
    │           │  
    │           └── StarredFilesPage  
    │               └── StarredFilesPage.  
    │               └── StarredFileCard.  
    │  
    └── Auth                      // Authentication Components  
        └── SignUpPage  
        │   └── SignUpPage.  
        │   └── SignUpForm.  
        │  
        └── SignInPage  
            └── SignInPage.  
            └── SignInForm.  





// Routes

http://localhost:5173/cloude/signin          -> SignInPage
http://localhost:5173/cloude/signup          -> SignUpPage
http://localhost:5173/cloude/home            -> DashboardPage with Recent Uploads, Folders, and Files Table
http://localhost:5173/cloude/shared          -> SharedFilesPage showing shared files
http://localhost:5173/cloude/starred         -> StarredFilesPage showing starred files


i have a parent div -> parent

parent has two childs left and right


parent is flex and left and right are placed side by side

both left and right child has a onClick function which changes a state value 'show'


i want that if show is true the left show visible in parent and right should be hidden

for that i want that left should move towards the negative left direction and right will take come in view
and vice versa
i am using react and tialwind css






Dashboard -> Shows recent uploads, 10 folders, 10 files 
My Storage -> All my files and folders
Shared -> Files and Folders that are shared to me
starred -> Files and folders that i have added to starred

/cloude/dashboard
/cloude/my-drive
/cloude/shared
/cloude/starred
/cloude/auth/signin
/cloude/auth/signup



---------------------------------------------------------

Dashboard have 3 sections
1. RecentUploads -> Shows the five most recent files uploaded.
2. Folders -> Shows recently uploaded or newly created folders.
3. Files -> Shows up to 20 files that are -> Shared with the user, Recently uploaded, Recently accessed

I also have 
'Shared' Page(files & folder)
'starred' page (files & folder)
'My Storage' page (shows all files and folder of my own)

I also have two buttons at top header, 'Create Folder' , 'Upload'
'Create Folder' button -> Lets create a folder
'Upload' -> Lets upload a single, multiple files and folder

If I am at Dashboard and create a folder or upload a file or folder,
It will be create or uploaded and show at 'My Storage' Page


If i am at My Storage Page,

My Storage -> file upload, folder upload, folder create
 - will create file or folder at 'My Storage Page'

My Storage -> some folder ->  file upload, folder upload, folder create
  - will create file or folder in that folder

--------------------------------------------------------------

Alright, let's walk through how this system will work, keeping everything organized for easy querying and maintaining proper URL structures. We'll also set up the database in Supabase to efficiently handle nested folders and files.

---

 1. Database Design in Supabase

We'll need three main tables:  
- users – To store user information.  
- folders – To store folder details, including nested structures.  
- files – To store file details.  

---

 users Table : 
This table keeps track of all users in the system.  

| id | name     | email             |
|----|----------|-------------------|
| 1  | John Doe | john@example.com   |
| 2  | Jane Roe | jane@example.com   |

---

 folders Table  
This table stores folder information.  
- id: Unique identifier for each folder.  
- name: Folder name.  
- parent_id: ID of the parent folder. Null if it's a root folder.  
- owner_id: The user who owns this folder (foreign key to users table).  
- created_at: Timestamp of folder creation.  

| id | name              | parent_id | owner_id | created_at          |
|----|-------------------|-----------|----------|---------------------|
| 1  | My Storage        | NULL      | 1        | 2025-02-20 10:00:00 |
| 2  | Work Documents    | 1         | 1        | 2025-02-20 10:05:00 |
| 3  | Personal Photos   | 1         | 1        | 2025-02-20 10:10:00 |
| 4  | Vacation Bali     | 3         | 1        | 2025-02-20 10:15:00 |
| 5  | Invoice 2023      | 2         | 1        | 2025-02-20 10:20:00 |

---

 files Table  
This table stores file details.  
- id: Unique identifier for each file.  
- name: File name.  
- folder_id: The folder to which this file belongs (foreign key to folders table).  
- owner_id: The user who owns this file (foreign key to users table).  
- url: URL of the uploaded file.  
- created_at: Timestamp of file upload.  

| id | name            | folder_id | owner_id | url                            | created_at          |
|----|-----------------|-----------|----------|------------------------------- |---------------------|
| 1  | Resume.pdf      | 2         | 1        | /drive/resume.pdf              | 2025-02-20 10:25:00 |
| 2  | BaliBeach.jpg   | 4         | 1        | /drive/vacation-bali/beach.jpg | 2025-02-20 10:30:00 |
| 3  | Invoice-Jan.pdf | 5         | 1        | /drive/invoice-2023/jan.pdf    | 2025-02-20 10:35:00 |

---

 2. User Flow and URL Structure  

 Scenario 1: Accessing My Storage  
- User clicks on My Storage from the sidebar.  
- URL: localhost:3000/cloude/my-storage  
- Query: Fetch folders where parent_id is NULL and owner_id is the logged-in user's ID.  
- Displayed Content:  
  - Folders: Work Documents, Personal Photos  
  - Files: None at this level.  

---

 Scenario 2: Navigating into a Folder  
- User clicks on Personal Photos.  
- URL: localhost:3000/cloude/my-storage/personal-photos  
- Query: Fetch folders where parent_id = 3 (Personal Photos' ID) and files where folder_id = 3.  
- Displayed Content:  
  - Folders: Vacation Bali  
  - Files: None at this level.  

--- 

 Scenario 3: Nested Folder Navigation  
- User navigates into Vacation Bali.  
- URL: localhost:3000/cloude/my-storage/personal-photos/vacation-bali  
- Query: Fetch folders and files where parent_id = 4 or folder_id = 4.  
- Displayed Content:  
  - Folders: None  
  - Files: BaliBeach.jpg  

---

 Scenario 4: Creating a Folder  
- User clicks Create Folder while in My Storage.  
- A new folder Projects is created.  
- Request Sent: POST request to backend with:  
  - name: Projects  
  - parent_id: NULL (since it's at the root level)  
  - owner_id: 1 (logged-in user ID)  
- Database Update:  
  - folders Table:  

| id | name     | parent_id | owner_id | created_at          |
|----|----------|-----------|----------|---------------------|
| 6  | Projects | NULL      | 1        | 2025-02-20 10:40:00 |

- Displayed Content: Refreshes to show the new Projects folder.  

---

 Scenario 5: Uploading a File  
- User uploads Report.pdf inside Work Documents.  
- URL: localhost:3000/cloude/my-storage/work-documents  
- Request Sent: POST request to backend with:  
  - name: Report.pdf  
  - folder_id: 2 (Work Documents' ID)  
  - owner_id: 1  
  - url: /drive/work-documents/report.pdf  
- Database Update:  
  - files Table:  

| id | name        | folder_id | owner_id | url                              | created_at          |
|----|-------------|-----------|----------|----------------------------------|---------------------|
| 4  | Report.pdf  | 2         | 1        | /drive/work-documents/report.pdf  | 2025-02-20 10:45:00 |

- Displayed Content: Refreshes to show the newly uploaded Report.pdf.  

---

 3. Benefits of This Setup  
- Nested Structure Handling: The parent_id column allows infinite nesting of folders.  
- Efficient Queries: Easy to get contents of any folder by querying parent_id for folders and folder_id for files.  
- Consistent URLs: URLs follow the folder hierarchy, maintaining a clean and intuitive structure.  
- Owner-based Security: owner_id helps ensure users only access their own files and folders.  

---

 4. Example Queries  

1. Get Root Level Folders for User 1:  

SELECT * FROM folders WHERE parent_id IS NULL AND owner_id = 1;


2. Get Contents of 'Personal Photos' Folder:  

SELECT * FROM folders WHERE parent_id = 3;
SELECT * FROM files WHERE folder_id = 3;


3. Get All Files Shared with User 1:  
We'll need an additional shared_files table for this.  

---

This structure efficiently supports:  
- Nested folders and files  
- Easy navigation and URL maintenance  
- Scalable storage and retrieval  



-------------------------------------------------------------------------------

I want that if user is not signedin then he must be taken to 

http://localhost:5173/cloude/auth/sign-in


let say if user is signed in and tries to go to the below urls,

http://localhost:5173/cloude/auth/sign-in
http://localhost:5173/cloude/auth/sign-up


then he must not be able to do that and should be taken to below url

http://localhost:5173/cloude/dashboard


Also if a user refresh the page then he must remain on same page unless he is signedin


following are the routes that needs to protect and dont let to be visited of not signedin,
/cloude/dashboard
/cloude/my-drive
/cloude/shared
/cloude/starred


following is my component structure, which is old setup using AuthContext and other stuf. I want new setup to protect routes

App.tsx --------------------------------

import React from "react";
import "./index.css";
import { AuthProvider } from "./context/AuthContext";
import AppRoutes from "./components/AppRoutes";

const App: React.FC = () => {
  return (
    <div className="app_wrapper">
      <AuthProvider>
        <AppRoutes />
      </AuthProvider>
    </div>
  );
};

export default App;

AppRoutes.tsx -------------------------

import React from "react";
import { Routes, Route, Navigate } from "react-router-dom";
import ProtectedRoute from "./ProtectedRoute";
import HomeLayout from "./Layout/HomeLayout";
import SignInPage from "./Auth/SignInPage";
import SignUpPage from "./Auth/SignUpPage";

const AppRoutes: React.FC = () => {
  return (
    <Routes>
      {/* Authentication Routes */}
      <Route path="/cloude/auth/sign-in" element={<SignInPage />} />
      <Route path="/cloude/auth/sign-up" element={<SignUpPage />} />

      {/* Protected Routes with HomeLayout */}
      <Route
        path="/cloude/*"
        element={
          <ProtectedRoute>
            <HomeLayout />
          </ProtectedRoute>
        }
      />

      {/* Redirect unknown routes */}
      <Route path="*" element={<Navigate to="/cloude/dashboard" replace />} />
    </Routes>
  );
};

export default AppRoutes;


HomeLayout.tsx --------------------------

import { useState } from "react";
import MainView from "./MainView/MainView";
import Navbar from "./Navbar/Navbar";
import Sidebar from "./Sidebar/Sidebar";

const HomeLayout: React.FC = () => {
  const [showSidebar, setShowSidebar] = useState<boolean>(false);
  return (
    <div className="w-[100%] h-[100%] overflow-hidden relative">
      <div
        // className={
        //   flex h-full transition-transform duration-300
        //   ${showSidebar ? "translate-x-0" : "-translate-x-1/2"}
        //   sm:translate-x-0 w-[200%] sm:w-full
        //   }

        className={
        flex h-full transition-transform duration-300
        ${showSidebar ? "translate-x-0" : "-translate-x-1/2"}
        lg:translate-x-0 w-[200%] lg:w-full
        }
      >
        <div className="w-[50%] lg:w-[20%] h-full relative flex">
          <Sidebar showSidebar={showSidebar} setShowSidebar={setShowSidebar} />
        </div>

        <div className="w-[50%] lg:w-[80%] h-full relative">
          <Navbar />
          <MainView showSidebar={showSidebar} setShowSidebar={setShowSidebar} />
        </div>
      </div>
    </div>
  );
};

export default HomeLayout;


MainView.tsx --------------------------------------


import { FC } from "react";
import { Route, Routes } from "react-router-dom";
import PageHeader from "./PageHeader";
import DashboardPage from "./Pages/Home/DashboardPage";
import SharedFilesPage from "./Pages/SharedFilesPage/SharedFilesPage";
import StarredFilesPage from "./Pages/StarredFilesPage/StarredFilesPage";

type MainViewProps = {
  showSidebar: boolean;
  setShowSidebar: React.Dispatch<React.SetStateAction<boolean>>;
};

const MainView: FC<MainViewProps> = ({ showSidebar, setShowSidebar }) => {
  return (
    <div className="w-full h-[calc(100%-80px)] flex flex-col">
      <PageHeader showSidebar={showSidebar} setShowSidebar={setShowSidebar} />
      <div className="w-[100%] h-[calc(100%-70px)] px-[20px]">
        <Routes>
          <Route path="/dashboard" element={<DashboardPage />} />
          <Route path="/shared" element={<SharedFilesPage />} />
          <Route path="/starred" element={<StarredFilesPage />} />
        </Routes>
      </div>
    </div>
  );
};

export default MainView;




---------------------------------------------------------------

FILE Upload
My supabase has user table, 

create table public.users (
  id uuid not null default extensions.uuid_generate_v4 (),
  user_id uuid null,
  full_name text not null,
  created_at timestamp with time zone null default CURRENT_TIMESTAMP,
  constraint users_pkey primary key (id),
  constraint users_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE
) TABLESPACE pg_default;

I have react+vite+ts+redux-toolkit setup at frontend
At backend i have node+express+supabase setup and also have routes and controllers
Now lets start , with files, upload,
I have a button clicking on which a modal is open which has option for file upload
clicking on it, it lets user select single or multiple files from computer.
Now i want to upload this file to supabase storage.

PS- At frontend as i am using supabase authentication, i have users session available and other session info.




---------------------------------------------------------------------------

Break down each of these scenarios step by step for your app Cloude.e, focusing on:

- Visiting /cloude/my-storage
- Opening a file named my documents.docx
- Opening a folder named My songs

---

 Tables Overview:

 1. Folders Table  
| id | name       | parent_folder_id | owner_id | created_at           |
|----|------------|------------------|----------|----------------------|
| 1  | My songs   | NULL             | Alice    | 2025-02-20 10:00:00  |
| 2  | Pictures   | NULL             | Alice    | 2025-02-21 09:30:00  |
| 3  | Rock       | 1                | Alice    | 2025-02-20 11:00:00  |
| 4  | Pop        | 1                | Alice    | 2025-02-20 11:30:00  |
| 5  | Documents  | NULL             | Alice    | 2025-02-21 08:45:00  |

- id: Unique identifier for each folder  
- name: Name of the folder  
- parent_folder_id: References the parent folder (NULL if it's a root folder)  
- owner_id: The user who owns the folder  
- created_at: Timestamp of folder creation  

---

 2. Files Table  
| id | name              | folder_id | owner_id | file_url                          | created_at             |
|----|-------------------|-----------|----------|------------------------------------|---------------------- |
| 1  | my documents.docx | NULL      | Alice    | https://.../my-documents.docx       | 2025-02-19 15:20:00  |
| 2  | song1.mp3         | 1         | Alice    | https://.../song1.mp3               | 2025-02-20 12:00:00  |
| 3  | song2.mp3         | 1         | Alice    | https://.../song2.mp3               | 2025-02-20 12:30:00  |
| 4  | rock_song1.mp3    | 3         | Alice    | https://.../rock_song1.mp3          | 2025-02-20 13:00:00  |
| 5  | profile.jpg       | 2         | Alice    | https://.../profile.jpg             | 2025-02-21 10:00:00  |

- id: Unique identifier for each file  
- name: Name of the file  
- folder_id: The folder the file belongs to (NULL if it's a root-level file)  
- owner_id: The user who owns the file  
- file_url: The storage URL of the file  
- created_at: Timestamp of file upload  

---

 1. Visiting /cloude/my-storage  
 Purpose:  To show all root-level folders and files owned by the user.

 URL:  /cloude/my-storage


 Tables Involved:  
- Folders Table  
- Files Table  

 Data Retrieved:  
- Folders Table:  
  - Get folders where parent_folder_id IS NULL and owner_id = Alice  
  - From the table, the matching rows are:  
    
    My songs, Pictures, Documents
    

- Files Table:  
  - Get files where folder_id IS NULL and owner_id = Alice  
  - From the table, the matching row is:  
    
    my documents.docx
    

 Displayed on the Page:  
- Folders:  
  - My songs  
  - Pictures  
  - Documents  

- Files:  
  - my documents.docx  

 When is the Request Made?  
- On page load of /cloude/my-storage  

---

2. Opening a File named my documents.docx  
 Purpose: To view or download the file.  

 URL: /cloude/my-storage/my-documents.docx


 Table Involved:  
- Files Table  

 Data Retrieved:  
- Get file details for my documents.docx where folder_id IS NULL and owner_id = Alice  

- From the Files Table:  
  
  Name: my documents.docx  
  File URL: https://.../my-documents.docx
  

 What Happens Next?  
- The File URL is used to either view or download the file depending on its type.  

 When is the Request Made?  
- On clicking the file name from the list in /cloude/my-storage

---

3. Opening a Folder named My songs  
P urpose:  To display the contents (subfolders and files) of My songs.  

 URL: /cloude/my-storage/my-songs

 Tables Involved:  
- Folders Table  
- Files Table  

 Data Retrieved:  
1. Get Subfolders:  
   - Get folders where parent_folder_id = 1 (id of My songs) and owner_id = Alice  
   - From the Folders Table, the matching rows are:  
     
     Rock, Pop
     

2. Get Files:  
   - Get files where folder_id = 1 (id of My songs) and owner_id = Alice  
   - From the Files Table, the matching rows are:  
     
     song1.mp3, song2.mp3
     

 Displayed on the Page:  
- Subfolders:  
  - Rock  
  - Pop  

- Files:  
  - song1.mp3  
  - song2.mp3  

 When is the Request Made?  
- On clicking the folder name (My songs) from the list in /cloude/my-storage

---

 Summary of Flow:  
1. Visiting /cloude/my-storage:  
   - From Folders Table: Get root-level folders (parent_folder_id IS NULL)  
   - From Files Table: Get root-level files (folder_id IS NULL)  
   - Displayed: My songs, Pictures, Documents, my documents.docx  

2. Opening a File (my documents.docx):  
   - From Files Table: Get file details and URL  
   - Displayed: File preview or download initiated  

3. Opening a Folder (My songs):  
   - From Folders Table: Get subfolders (Rock, Pop)  
   - From Files Table: Get files in My songs (song1.mp3, song2.mp3)  
   - Displayed: Contents of My songs  

---

-----------------------------------------------------

Lets for a second take and pause and set the frontend component structure,

I have 'MainView' component/page.
Inside this component/Page, it will rendered.
below pages,
- 'MyStorage'
- 'SharedFiles'(with me) Page
- 'starred' page

All of these three pages have same ui.
They all will have two sections.
1. Folders section -> displays folders
2. Files section -> displays files

So i made a common child Sub page 'FilesFoldersPage'
This will be rendered in parent pages 'MyStorage', 'SharedFiles', 'starred'.

FilesFoldersPage will recieve files & folders data and will be rendered accordingly.

For example we visits, 'MyStorage' page.
Then inside 'MyStorage' page, files and folders of it will be Fetched from backend supabase,
and 'FilesFoldersPage' will be rendered which will get the files and folders data as props
from MyStorage page.

Similar is the case for 'SharedFilesPage' and 'starred' page.


Now lets say we are inside the 'MyStorage' page and 'FilesFoldersPage' is rendered with the MyStorage pages's Content.
We see somes files and folders,

Files
 - project brief.docx
 - floor plan.pdf

Folders
 - My Songs
 - Trip Pictures

We now click on 'My Songs' folder.

Now again 'FilesFoldersPage' will be rendered but now the data will be of 'My Songs' folder.
So we noticed that how nesting of folders will render the same page.


Url structure:

/cloude/my-storage -> we are inside 'My Storage' page

We click on folder named 'My Songs'

/cloude/my-storage/folders/my_songs_folders_id -> we are inside 'My Songs' folder

Lets say 'My Songs' folder have one more folder named 'Pop'
we click on 'Pop' folder

/cloude/my-storage/folders/pop_folder_id -> we are inside 'Pop' folder 



Now incase of files we can have,

/cloude/my-storage/files/project brief_docx_id







Let say we have nested folders in 'My Storage' page

'My Storage' -> 'My Songs' -> 'Pop' -> '90sHits' -> 'Michael Jackson' -> 'World Tour'

so how much deep we go, the url remains the same except the end part of url

/cloude/my-storage/folders/my_song_id
/cloude/my-storage/folders/pop_id
/cloude/my-storage/folders/90s-hits_id
/cloude/my-storage/folders/michael-jackson_id
/cloude/my-storage/folders/world-tour_id


So now in my Component that has same ui, how to fetch data. 


// MyStoragePage.tsx
import FilesFolderPage from "../Common/FilesFolderPage";


type Folder = {
  folderId: string;
  folderName: string;
  parentFolderId: string | null;
};

type File = {
  fileId: string;
  fileName: string;
  folderId: string;
};

// testing dummy folders data
const folders: Folder[] = [
  { folderId: "f1", folderName: "Root", parentFolderId: null },
  { folderId: "f2", folderName: "Documents", parentFolderId: "f1" },
  { folderId: "f3", folderName: "Images", parentFolderId: "f1" },
  { folderId: "f4", folderName: "Videos", parentFolderId: "f1" },
  { folderId: "f5", folderName: "Work", parentFolderId: "f2" },
  { folderId: "f6", folderName: "Personal", parentFolderId: "f2" }
];
// testing dummy files data
const files: File[] = [
  { fileId: "file1", fileName: "resume.docx", folderId: "f2" },
  { fileId: "file2", fileName: "holiday.jpg", folderId: "f3" },
  { fileId: "file3", fileName: "birthday.mp4", folderId: "f4" },
  { fileId: "file4", fileName: "project.pdf", folderId: "f5" },
  { fileId: "file5", fileName: "notes.txt", folderId: "f6" },
  { fileId: "file6", fileName: "invoice.pdf", folderId: "f5" },
  { fileId: "file7", fileName: "logo.png", folderId: "f3" },
  { fileId: "file8", fileName: "music.mp3", folderId: "f4" },
  { fileId: "file9", fileName: "app.zip", folderId: "f6" },
  { fileId: "file10", fileName: "readme.md", folderId: "f2" }
];

const MyStoragePage = () => {
  return (
    <div className="w-full h-full flex ">
      <FilesFolderPage files={files} folders={folders} />
    </div>
  );
};

export default MyStoragePage;



MyStorage -> folder1 -> folder2 -> folder3 -> folder4


files & folder inside folder3
-  folder3_1
-  folder3_2
-  folder3_3
-  file_3_1.docx
-  file_3_2.pdf


folder1 -> folder2 -> folder3 -> folder4

/cloude/my-storage/folders/folder1_id
/cloude/my-storage/folders/folder2_id
/cloude/my-storage/folders/folder3_id
/cloude/my-storage/folders/folder4_id


folder1 -> folder2 -> folder3 -> clicks on file_3_1.docx


/cloude/my-storage/files/ file_3_1.docx_id





/cloude/my-storage/
/cloude/my-storage/folders/folder1_id
/cloude/my-storage/folders/folder2_id
/cloude/my-storage/folders/folder3_id


/cloude/my-storage/files/file1_id
/cloude/my-storage/files/file2_id
/cloude/my-storage/files/file3_id

--------------------------------------------

/cloude/shared/
/cloude/shared/folders/folder1_id
/cloude/shared/folders/folder2_id
/cloude/shared/folders/folder3_id


/cloude/shared/files/file1_id
/cloude/shared/files/file2_id
/cloude/shared/files/file3_id


--------------------------------------------

/cloude/starred
/cloude/starred/folders/folder1_id
/cloude/starred/folders/folder2_id
/cloude/starred/folders/folder2_id

/cloude/starred/files/file1_id
/cloude/starred/files/file2_id
/cloude/starred/files/file3_id

-------------------------------


my-storage -> 'My Storage' Component
shared -> 'Shared' Component
starred -> 'Starred' Component


-------------------------
Below are the three pages,

'My Storage'
'Shared'
'Starred'

All these page will have either a 'Folders' page or 'Files'.

how to correctly setup nested routes in react router   






I am making app like google drive.

I am using Supabase authentication on frontend react side.
I have users session also maintained and token in session.


Following are the features of the app like google drive

Has page which shows user's all Files and Folders that he owns.
Has page that shows all files and folders shared with him by others.
Has page that shows files and folders that are marked starred. This can be his own files/folders or shared 
Has dashboard page which shows 10 recently uploaded files and 10 recently create/uploaded folders.
 
ps-above features are like google drive. now considering the above requirements,
I will use supabase storage for file storage. I am  already using supabase authentication.
Now i want the tables structure such that all the above requirements are fullfilled and query CRUD becomes
simple.

techstack ::
frontend -> react+vite+redux-toolkit+typescript
frontend -> node+express+supabase+typescript

-----------------------------------------------------------------------------------------------------------------

I have a (react+vite)fontend (node+supabase)backend app. 


Lets say there a two users, Alice and Bob and both are using the apps on their computer and are logged in via their respective email and password. 
For authentication we have used supabase authentication.

Now the app shows files they have uploaded. So Alice app shows his files and Bob app shows his own files.

Now app has feature which lets users to share a file by two methods,
1. Via email
2. Generating shareable link.

In first method, let say Alice selects any file and then she enters the email of Bob.
Now Bob's app will show this file that has been shared by Alice to him.


Now let say Alice decides to use second method. She clicks on the file and generates a shareable link. 
Now anyone who have this link can access the file.

---------------------------------------------------

Now Let me introduce you more of my app's requirements and features.


My app name is 'Cloude', which i forgot to mention before.

My app have some pages,
- 'Dashboard'
- 'My Storage'
- 'Shared with me'
- 'Starred'

'Dashboard' page have three sections,
- Recently uploaded section
  This section will show 10 most recently uploaded file
- Folder section
  This section will show 10 most recently created or uploaded folders
- File section
  This will shows 20 recent file with which user have intereacted(opened,shared)

'My Storage' page have two sections
- Files
  Shows all the file of the user's own that are uploaded by him
- Folders all the folders(folder can have child folder and also files in it) of the user's own that are uploaded by him

'Shared with me' page also has two sections,
- Files
  Shows all the file that are shared with the user by others with him.
- Folders 
  Shows all the folders that are shared with the user by others with him.

 'Starred' page also has two sections, 
 - Files
    Shows all the files that are starred by the user(own and shared)
 - Folders 
   Shows all the folders that are starred by the user(Own and shared)

---------------------------------------------------------------------------

TABELS

users::
create table public.users (
  id uuid not null default extensions.uuid_generate_v4 (),
  user_id uuid null,
  full_name text not null,
  created_at timestamp with time zone null default CURRENT_TIMESTAMP,
  constraint users_pkey primary key (id),
  constraint users_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE
) TABLESPACE pg_default;



files ::
CREATE TABLE files (
  id UUID PRIMARY KEY,                         
  user_id UUID REFERENCES users(id) ON DELETE CASCADE, 
  folder_id UUID REFERENCES folders(id) ON DELETE CASCADE, 
  file_name TEXT NOT NULL,                      
  file_type TEXT NOT NULL,                      
  file_size BIGINT NOT NULL,                    
  storage_path TEXT NOT NULL UNIQUE,             
  thumbnail_url TEXT,                           
  is_starred BOOLEAN DEFAULT FALSE,              
  is_shared BOOLEAN DEFAULT FALSE,               
  created_at TIMESTAMPTZ DEFAULT NOW(),          
  updated_at TIMESTAMPTZ DEFAULT NOW()           
);


folders ::

CREATE TABLE folders (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE, -- Owner of the folder
  parent_folder_id UUID REFERENCES folders(id) ON DELETE CASCADE, -- Parent folder for nesting
  folder_name TEXT NOT NULL, -- Folder name
  slug TEXT NOT NULL, -- URL-friendly version of the folder name
  is_shared BOOLEAN DEFAULT FALSE, -- Shared status
  is_starred BOOLEAN DEFAULT FALSE, -- Starred status
  created_at TIMESTAMPTZ DEFAULT NOW(), -- Creation timestamp
  updated_at TIMESTAMPTZ DEFAULT NOW() -- Last modified timestamp
);





/cloude/my-storage/folders/[folder_id]

/cloude/shared/folders/[folder_id]

/cloude/starred/folders/[folder_id]


all of the three routes will render same page.tsx
this pages.tsx will have same ui

In this page.tsx we gonna fetch the data using the folder_id.

Only difference it the api route will be different

my-storage/folders/[folder_id]->  /api/my-storage/getData
shared/folders/[folder_id]->  /api/starred/getData
starred/folders/[folder_id]->  /api/starred/getData

how to set the next 15  app routing




I am stuck in my Next+supabase project.


I have three pages
- 'My Storage' page
- 'Shared With Me' page
- 'Starred' page

Frontend url structure

/cloude/home/my-storage/   
/cloude/home/my-storage/folders/[folderId]
- Both above urls will render a same page, lets say FetchPage. 

FetchPage will have two sections,
- Folders -> shows all folders
- Files -> shows all files

- FetchPage will make fetch api request to same api route -> '/api/my-storage/getContent$/{folderId}'

for the first url without '/folders/[folderId]', we will not have folderId. 
for the second url with '/folders/[folderId]', we will have folderId.

Now depending of the folderId present or null in api request, we will fetch data from tables.

We have files table and folder table

files_table
id
filename
user_id
folder_id


folders_table
id
folderName
parentFolderId


lets take two scenarios,
first scenario,
1. User visits the url -> /cloude/home/my-storage/   
2. FetchPage is rendered, which will make a api call to backend
3. Now at this, url we dont have folderId, that means from backend we will fetch all
   the files for the user which have folderId = null.
   We will also fetch all the folders for the user where parentFolderId= null
   
second scenario,
1. User visits the url -> /cloude/home/my-storage/folders/[folderId]   
2. FetchPage is rendered, which will make a api call to backend
3. Now at this, url we have folderId, that means from backend we will fetch all
   the files for the user which have folderId = folderId.
   We will also fetch all the folders for the user where parentFolderId= folderId
  
What does we conclude?
We conclude that if we have folderId then we a inside a folder and we will fetch its content(files & sub folders folder)
If we dont have a folderId then we are at root.

Now My Storage page show all the content of the user, which he owns, of which he have uploaded




---------------------------------------------------------------------

Now, Similar to above 'My Storage' page,
We have 'Shared' Page which will again show files and folders.
But this time, it will be the one that is shared to him by others.
For this we maintained a share_table in supabase DB.

share_table
id
item_id -> id of file or folder from files or folder table
item_type -> file/folder
shared_by -> user1 id 
shared_with -> user2 id -> receipent


/cloude/home/shared/
/cloude/home/shared/folders/[folderId]

Both of the above will render the same Page, FetchPageShared
FetchPageShared will fetch data from api route  '/api/shared/getContent$/{folderId}''

Lets understand it with scenarios,
First scenario,
1. user visits -> /cloude/home/shared
2. FetchPageShared is rendered 
3. FetchPage will make the call to same api
3. Now at this url, we dont have folderId, that means from backend we will fetch all
   the files that are shared to him
   We will also fetch all the folders that are shared to him

Second scenario,
1. user visits -> /cloude/home/shared/folders/[folderId]
2. FetchPageShared is rendered 
3. FetchPage will make the call to same api
3. Now at this url, we  have folderId, that means from backend we will fetch all
   the files that are shared to him and belongs to the folder with folderId
   We will also fetch all the folders that are shared to him, which are sub-folder to the Parent folder with id folderId

   
     
     





-------------------------------------------------------------------------




/cloude/home/starred/
/cloude/home/starred/folders/[folderId]




Lets take an example,

Lets say user1 shared folder name -> 'Songs' to user2.
This 'Songs' folder will be show to user2 when he visits the url '/cloude/home/shared'

Shared_table will have entry,

item_id:folderId -> referencing the folder id on folders table
item_type:folder
shared_by : user1_id
shared_with : user2_id

Now When the user visited the 'Shared' Page -> '/cloude/home/shared/'

We make api request and as folderId is not present in url (as we are in root),
backend will get the item where shared_with matches the user2's id.
Also item_type = folder and also for that item in folder table parentFolderId = null.


Now that 'Shared' Page will show the shared folder 'Songs'.

This 'Songs' folder which was shared to user2 by user1 also had sub folder '80sHits'.

So when user clicks on this 'Songs' folder url, changes to -> /cloude/home/shared/folder/[folderId(Songs folder id)]

Now again we make api request to the backend,

backend now check the share_table.
But this sub folder '80sHits' is not in share_table, because its parent folder 'Songs' was shared,
and not its content, although its content should be available. Now how to handle this.

Tell me if i am correct in understanding it.


explain like,

user clicks the link on frontend that take him to this url
at this url this page is rendered. This page needs to show this based on the url
so it make the api request. Mention what the api request sends and what backend recieves.
At backend we got to this table and fetch this table.
backend send the response to frontend and with these data and data is displayed
---------------------------------


Alright, let's go step by step from the user's actions to what happens in the frontend and backend, for both:  
1. My Storage Page (/cloude/home/my-storage/)  
2. Shared Page (/cloude/home/shared/) including sub-folder navigation  

I'll explain it like a story, covering:  
- What the user does on the frontend.  
- What URL they visit and what component is rendered.  
- Why an API request is made, what it sends, and what the backend receives.  
- Which tables are queried using Supabase SDK.  
- What the backend responds with and how the frontend displays the data.  

---

 1. 🗄️ My Storage Page (/cloude/home/my-storage/)  

---

 User Action:  
- The user clicks on the "My Storage" link in the sidebar or navbar.  
- This takes the user to the URL:  
  
  /cloude/home/my-storage/
  

---

 Page Rendering:  
- The MyStoragePage component is rendered for this route.  
- The page needs to display:  
  - All folders created by the user, at the root level (i.e., not inside any sub-folder).  
  - All files uploaded by the user that are not inside any folder.  

---

 Why is an API Request Made?  
- To fetch the user's content at the root level.  
- The page makes an API request to:  
  
  /api/storage/getContent
  

- The request payload includes:  
  
  {
    folderId: null  // No folderId because we're at the root
  }
  

---

 At the Backend:  
1. API Endpoint: /api/storage/getContent receives the request.  
2. Parameters Received:  
   - folderId: null  
   - userId: user1_id (from the session or auth context)  

3. Purpose:  
   - To fetch all content created by this user at the root level.  

4. Fetching Folders:  
   - Query the folders table to get all root-level folders created by the user:  
     
     const folders = await supabase
       .from('folders')
       .select('*')
       .eq('created_by', user1_id)
       .is('parentFolderId', null);
     
     - This gets folders where parentFolderId is null, meaning they are at the root level.  

5. Fetching Files:  
   - Query the files table to get all files at the root level:  
     
     const files = await supabase
       .from('files')
       .select('*')
       .eq('uploaded_by', user1_id)
       .is('parentFolderId', null);
     

6. Backend Response:  
   - The backend sends a response containing:  
     
     {
       folders: [ ... ],  // List of root-level folders
       files: [ ... ]     // List of root-level files
     }
     

---

 Frontend Updates:  
- The MyStoragePage component receives the response and renders the folders and files.  
- The user now sees:  
  - All their root-level folders and files.  
  - They can click on a folder to navigate inside it.  

---

 Navigating Into a Sub-Folder  
- Example: The user clicks on the Work Documents folder.  
- The URL changes to:  
  
  /cloude/home/my-storage/folder/[folderId]
  

---

 What Happens Next:  
- An API request is made to:  
  
  /api/storage/getContent
  
- The request payload includes:  
  
  {
    folderId: folderId  // ID of the clicked folder
  }
  

---

 At the Backend (Sub-Folder):  
1. API Endpoint: /api/storage/getContent receives the request.  
2. Parameters Received:  
   - folderId: folderId (ID of the clicked folder)  
   - userId: user1_id  

3. Purpose:  
   - To fetch all folders and files inside this sub-folder.  

4. Fetching Sub-Folders:  
   - Query folders table for sub-folders:  
     
     const subFolders = await supabase
       .from('folders')
       .select('*')
       .eq('parentFolderId', folderId);
     

5. Fetching Files in Sub-Folder:  
   - Query files table for files in this sub-folder:  
     
     const files = await supabase
       .from('files')
       .select('*')
       .eq('parentFolderId', folderId);
     

6. Backend Response:  
   - The backend responds with:  
     
     {
       folders: [ ... ],  // Sub-folders inside the clicked folder
       files: [ ... ]     // Files inside the clicked folder
     }
     

---

 Frontend Updates:  
- The MyStoragePage component renders the sub-folders and files.  
- The user now sees:  
  - Contents of the clicked folder (e.g., Work Documents).  

---

 2. 📂 Shared Page (/cloude/home/shared/)  

---

 User Action:  
- The user clicks on the "Shared" link in the sidebar or navbar.  
- This takes the user to the URL:  
  
  /cloude/home/shared/
  

---

 Page Rendering:  
- The SharedPage component is rendered.  
- The page needs to display:  
  - All folders shared with the user, at the root level.  
  - All files shared with the user that are not inside any folder.  

---

 API Request:  
- An API request is made to:  
  
  /api/shared/getContent
  
- The request payload includes:  
  
  {
    folderId: null  // At root level
  }
  

---

 At the Backend:  
1. API Endpoint: /api/shared/getContent receives the request.  
2. Parameters Received:  
   - folderId: null  
   - userId: user2_id  

3. Fetching Shared Folders:  
   - Query share_table to get shared folders:  
     
     const sharedFolders = await supabase
       .from('share_table')
       .select('item_id')
       .eq('shared_with', user2_id)
       .eq('item_type', 'folder');
     

4. Fetching Files:  
   - Check share_table for files shared directly:  
     
     const sharedFiles = await supabase
       .from('share_table')
       .select('item_id')
       .eq('shared_with', user2_id)
       .eq('item_type', 'file');
     

---

 Navigating Into a Shared Sub-Folder  
- Example: The user clicks on the Songs folder.  
- The URL changes to:  
  
  /cloude/home/shared/folder/[folderId]
  

- API Request:  
  - An API request is made with the clicked folder's ID.  
  - The backend recursively checks for sub-folders and files using folders and files tables.  
  - The user sees the contents of the shared folder, including sub-folders and files.  




  Alright, let's explain navigating into a sub-folder on the Shared Page, including the check for sharing permissions and how we handle parent folder inheritance.  

We'll go through it step by step:  
- What the user does on the frontend.  
- Which URL they visit and what component is rendered.  
- What API request is made, what it sends, and what backend receives.  
- How we check the share table to see if the folder is shared.  
- How we check parent folders if the current folder isn't directly shared.  
- What the backend responds with and how the frontend displays the data.  

---

 📂 Shared Page - Navigating into a Sub-Folder  
URL Pattern:  

/cloude/home/shared/folder/[folderId]


---

 User Action:  
- The user is on the Shared Page:  
  
  /cloude/home/shared/
  
- They click on a shared folder named "Music" which has an ID of folderId1.  
- The URL changes to:  
  
  /cloude/home/shared/folder/folderId1
  

---

 Page Rendering:  
- The SharedPage component is rendered for this route.  
- The page needs to display:  
  - All sub-folders inside the Music folder.  
  - All files inside the Music folder.  

---

 Why is an API Request Made?  
- To fetch the contents of the Music folder, including:  
  - Sub-folders  
  - Files  
- To check if the user has access to this folder.  

- An API request is made to:  
  
  /api/shared/getContent
  
- The request payload includes:  
  js
  {
    folderId: folderId1  // ID of the "Music" folder
  }
  

---

 At the Backend:  
1. API Endpoint: /api/shared/getContent receives the request.  
2. Parameters Received:  
   - folderId: folderId1 (ID of the clicked folder)  
   - userId: user2_id (the user who is trying to access the folder)  

---

 Checking Sharing Permissions:  
- The backend first checks if this folder (folderId1) is directly shared with the user.  

---

# 1. Check if Folder is Directly Shared:  
- Query the share_table to see if this folder is shared:  
  js
  const isDirectlyShared = await supabase
    .from('share_table')
    .select('*')
    .eq('item_id', folderId1)
    .eq('item_type', 'folder')
    .eq('shared_with', user2_id)
    .single();
  
- If the folder is directly shared:  
  - The user has access to this folder.  

---

# 2. If Not Directly Shared, Check Parent Folders:  
- If isDirectlyShared is null (i.e., this folder is not directly shared), the backend checks the parent folders to see if any parent folder is shared.  

- Recursive Check for Parent Sharing:  
  - Query the folders table to get the parentFolderId:  
    js
    const parentFolder = await supabase
      .from('folders')
      .select('parentFolderId')
      .eq('id', folderId1)
      .single();
    
  - The backend gets parentFolderId: parentFolderId1.  

---

# 3. Check Parent Folder in Share Table:  
- The backend recursively checks if parentFolderId1 is shared:  
  js
  const isParentShared = await supabase
    .from('share_table')
    .select('*')
    .eq('item_id', parentFolderId1)
    .eq('item_type', 'folder')
    .eq('shared_with', user2_id)
    .single();
  
- This process continues up the folder tree until:  
  - A shared parent folder is found, or  
  - The root is reached.  

---

# 4. Decision Based on Sharing Status:  
- If a parent folder is shared:  
  - The user is granted access because sharing inherits to sub-folders.  
- If no parent folder is shared:  
  - The backend denies access and responds with a 403 Forbidden.  

---

 Fetching Folder Contents:  
- If access is granted, the backend fetches the contents of the folder:  

1. Get Sub-Folders:  
   - Query the folders table for sub-folders:  
     js
     const subFolders = await supabase
       .from('folders')
       .select('*')
       .eq('parentFolderId', folderId1);
     
2. Get Files:  
   - Query the files table for files in this folder:  
     js
     const files = await supabase
       .from('files')
       .select('*')
       .eq('parentFolderId', folderId1);
     

---

 Backend Response:  
- The backend sends a response containing:  
  js
  {
    folders: [ ... ],  // Sub-folders inside "Music"
    files: [ ... ]     // Files inside "Music"
  }
  

---

 Frontend Updates:  
- The SharedPage component receives the response and renders the sub-folders and files.  
- The user now sees:  
  - All contents of the "Music" folder, including:  
    - Sub-folders (e.g., "Rock", "Pop", "Classical")  
    - Files (e.g., song1.mp3, song2.mp3)  

---

 Summary Recap:  
- User clicks on a shared folder in the Shared Page.  
- URL changes, and SharedPage component is rendered.  
- API request is made to get the folder's contents.  
- Backend checks:  
  - If the folder is directly shared, or  
  - If any parent folder is shared.  
- Access is granted if the folder is shared directly or inherited from a shared parent.  
- Backend fetches sub-folders and files and sends them to the frontend.  
- Frontend renders the contents, and the user can navigate deeper.  


POST
GET
PATCH
DELETE

/api/user/file/:fileId -> GET by id, DELETE by id, PATCH by id
/api/user/file/ -> GET all files, POST new file

/api/user/folder/:folderId -> GET by id, DELETE by id, PATCH by id
/api/user/folder/ -> GET all files, POST new folder


/api/shared/file/:fileId -> GET by id, DELETE by id, PATCH by id
/api/shared/file/ -> GET all files


/api/shared/folder/:folderId -> GET by id, DELETE by id, PATCH by id
/api/shared/folder/ -> GET all files




- Songs
  - MJ
    - Classics
    - 90sHits
      - beatit.mp3  
  - Rihana
    - Mega Mix
    - Mashups
  - Akon
    - Smack That.mp3

Movies
  - SciFi
  - Action
  - Romance

- project.pdf
- schedule.pdf  


user stars 'MJ' folder inside the 'Songs' folder and project.pdf and schedule.pdf.

In database, in starred table is like,

item_type = folder | file
folder_id  -> ref on folders table id
file_id -> ref on files table id
user_id 


When 'MJ' folder is starred,
in db, starred table we make entry for just the 'MJ' for and not its content(files & subfolder).

User visits 'Starred Page',
Starred page will two things,
userId and folderId(can be null) in url

if folderId is null means we are at root of shared page.

We make a query to db passing the folderId and userId.

At backend we check if folderId is null or not.

If null -> get all the items(file type and folder type) from with matching userId.

if not null -> get all the files and subfolder of the of the folder with folderId.


Scenario,

User visits the starred page,
userId -> user's Id
folderId -> null

fetch all the items from starred table with matching userId

Page displays:
- Folders section
  -> 'Songs' folder
- File section
  -> project.pdf
  -> schedule.pdf    

Now user opens Songs folder

url changes, and we have now folderId( of Songs folder) and userId

fetch request now has userId and folderId of Songs folder

At backend we have folderId and userId

As we have folderId, we now query the folders table and get all the folders which has parent_folder_id = folderId
We then get all the files from files table who has folderId = folderId.

return files and folders.

So we dont fetch all the nested content at once.




------------------------------------------------------------------------------------------------------------------------
In My NextJS 15 App i have a page 'Shared with me Page'.
There is also a 'Storage' Page

This page has two section:
- Folders -> shows FolderCards
- Files  -> Shows FileCards

Consider this scenario,

There are two users -> user1 and user2

user1 opens his app. Visits Storage page.
At storage page he sees bunch of folder and files. He only see the direct items and not inside content of folders

-> Folder Section
   - Songs
   - Movies
-> Files section
   - project.pdf
   - budget-xlms   

 
├── Songs/  
│   ├── Taylor Swift/  
│   │   ├── Albums/  
│   │   │   ├── 1989/  
│   │   │   │   ├── 01-Welcome_To_New_York.mp3  
│   │   │   │   ├── 02-Blank_Space.mp3  
│   │   │   │   └── Cover.jpg  
│   │   └── Singles/  
│   │       ├── Love_Story.mp3  
│   │       └── Shake_It_Off.mp3  
│   ├── The Weeknd/  
│   │   ├── Albums/  
│   │   │   ├── After Hours/  
│   │   │   │   ├── 01-Alone_Again.mp3  
│   │   │   │   ├── 02-Blinding_Lights.mp3  
│   │   │   │   └── Cover.jpg  
│   │   └── Singles/  
│   │       └── Starboy.mp3  
│   └── Ed Sheeran/  
│       ├── Albums/  
│       │   ├── Divide/  
│       │   │   ├── 01-Shape_Of_You.mp3  
│       │   │   ├── 02-Castle_On_The_Hill.mp3  
│       │   │   └── Cover.jpg  
│       └── Singles/  
│           └── Perfect.mp3  
│  
├── Movies/  
│   ├── Genre/  
│       ├── Action/  
│       │   ├── Inception (2010)/  
│       │   │   ├── Inception.mp4  
│       │   │   ├── Poster.jpg  
│       │   │   └── Subtitles.srt  
│       └── Comedy/  
│           ├── The Mask (1994)/  
│           │   ├── The_Mask.mp4  
│           │   └── Poster.jpg  
│           └── Superbad (2007)/  
│               ├── Superbad.mp4  
│               └── Poster.jpg  
|-- project.pdf
|-- budget.xlms   


Now lets say user selects the Songs folder and decided to Share it.
He enters the email of the user he wants to share this folder with.
So he enters the email of user2.
He also share the project.pdf and budget.xlms


Now user2 opens his app and visits the Share page.

He sees two sections
-> Folders section
-> Files section 
 
In Folder section he sees Songs folder
In files section he sees project.pdf and budget.xlms

Now he opens the Songs folder.
He now sees the,
In Folder section -> 'Taylor Swift', 'The Weeknd', 'Ed Sheeran'
In Files section there are on files as Songs folder only has Sub folders and not files.

So what we conclude that we see only the direct child and not the nested contents.


Now i have bunch of tables setup up for now. 

create table public.users (
  user_id uuid not null,
  email text not null,
  full_name text not null,
  timestamp timestamp with time zone null default CURRENT_TIMESTAMP,
  constraint users_pkey primary key (user_id),
  constraint users_email_key unique (email),
  constraint users_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE
) TABLESPACE pg_default;

create table public.files (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  folder_id uuid null,
  file_name text not null,
  file_type text not null,
  file_size bigint not null,
  storage_path text not null,
  thumbnail_url text null,
  is_starred boolean null default false,
  is_shared boolean null default false,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint files_pkey primary key (id),
  constraint files_storage_path_key unique (storage_path),
  constraint unique_folder_file_name unique (folder_id, file_name),
  constraint files_folder_id_fkey foreign KEY (folder_id) references folders (id) on delete CASCADE,
  constraint files_user_id_fkey foreign KEY (user_id) references users (user_id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_files_user_id on public.files using btree (user_id) TABLESPACE pg_default;

create index IF not exists idx_files_folder_id on public.files using btree (folder_id) TABLESPACE pg_default;

create index IF not exists idx_files_is_starred on public.files using btree (is_starred) TABLESPACE pg_default;

create index IF not exists idx_files_is_shared on public.files using btree (is_shared) TABLESPACE pg_default;


create table public.folders (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  parent_folder_id uuid null,
  folder_name text not null,
  slug text not null,
  is_shared boolean null default false,
  is_starred boolean null default false,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint folders_pkey primary key (id),
  constraint unique_user_folder_slug unique (user_id, slug),
  constraint folders_parent_folder_id_fkey foreign KEY (parent_folder_id) references folders (id) on delete CASCADE,
  constraint folders_user_id_fkey foreign KEY (user_id) references users (user_id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_folders_user_id on public.folders using btree (user_id) TABLESPACE pg_default;

create index IF not exists idx_folders_is_starred on public.folders using btree (is_starred) TABLESPACE pg_default;

create index IF not exists idx_folders_is_shared on public.folders using btree (is_shared) TABLESPACE pg_default;


Now tell me how do i setup the ui and content showing. Iam using nextjs 15 and supabase db

------------------------------------------------------------------------------------------------



if i am at root or inside a folder on any page then these all can be the frontend urls

  http://localhost:3000/cloude/home/my-storage
  http://localhost:3000/cloude/home/my-storage/folders/b16dd263-36ea-4931-a3e0-57a7a9995e6a
  http://localhost:3000/cloude/home/shared/
  http://localhost:3000/cloude/home/shared/folders/b16dd263-36ea-4931-a3e0-57a7a9995e6a
  http://localhost:3000/cloude/home/starred/


  for all the above paths with /folders/folderId or without  /folders/folderId 

  i want to open same page.tsx

  now instead of folders if we have files the different page.tsx

  how to do in nextJS app router



  app/
├── cloude/
│   ├── home/
│   │   ├── my-storage/
│   │   │   ├── [[...path]]/
│   │   │   │   └── page.tsx       // Handles /cloude/home/my-storage and /cloude/home/my-storage/folders/folderId
│   │   ├── shared/
│   │   │   ├── [[...path]]/
│   │   │   │   └── page.tsx       // Handles /cloude/home/shared and /cloude/home/shared/folders/folderId
│   │   ├── starred/
│   │   │   └── page.tsx           // Handles /cloude/home/starred
│   │   └── layout.tsx             // Layout for all /cloude/home routes
├── layout.tsx                     // Root layout


----------------------------------------------

here is my requirements,   

i have a dashboard where i will shows files based on categories,
like Audio, Video, Code etc.

when i click on category i opens a page and url has set category name like
/.../..../categories?category=code


now i will make a api request to backend and fetch all the files of
the user which falls under this category.

Also on dashboard category card will show icons for each category like
for Audio -> audio icon from iconify etc.

Also each file extension will have icons like .pdf will have pdf icon.
if no icon then its category icon.


How to do this


---------------------------------------------------------
files table -> all the files user uploaded
folders -> all the folders user uploaded
share_items -> has data that shows what files have been shared to the user by other user.



Now lets say if i just wanted to show files from files table then it would have been easy.
But what i want is to show files from files table and also the items from share_items table.
So the datatable on dashboard will show all the user files and also the items that are shared with him.
Now the shared items can be file or folder.

So the data table will have cols like,

Name -> file name from files table, or item's name referencing the respective table(file or folder)
Owner -> if the file is users own(files table where userId is matching is users own files) then 'You' or if shared then name of person who shared shared 
Date Uploaded/Shared -> date created
Type -> file/ folder
Shared -> true/false

--------------------------------------------------------------------------------------

TODO :
delete file when folder is delete from storage
if a item is already shared show in share modal 

UI
Auth form styling

janedoe@gmail.com
jjane@123